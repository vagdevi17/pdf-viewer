{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'warning';\nimport StructTreeItem from './StructTreeItem.js';\nimport usePageContext from './shared/hooks/usePageContext.js';\nimport useResolver from './shared/hooks/useResolver.js';\nimport { cancelRunningTask } from './shared/utils.js';\nexport default function StructTree() {\n  const pageContext = usePageContext();\n  invariant(pageContext, 'Unable to find Page context.');\n  const {\n    onGetStructTreeError: onGetStructTreeErrorProps,\n    onGetStructTreeSuccess: onGetStructTreeSuccessProps\n  } = pageContext;\n  const [structTreeState, structTreeDispatch] = useResolver();\n  const {\n    value: structTree,\n    error: structTreeError\n  } = structTreeState;\n  const {\n    customTextRenderer,\n    page\n  } = pageContext;\n  function onLoadSuccess() {\n    if (!structTree) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    if (onGetStructTreeSuccessProps) {\n      onGetStructTreeSuccessProps(structTree);\n    }\n  }\n  function onLoadError() {\n    if (!structTreeError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, structTreeError.toString());\n    if (onGetStructTreeErrorProps) {\n      onGetStructTreeErrorProps(structTreeError);\n    }\n  }\n  // biome-ignore lint/correctness/useExhaustiveDependencies: useEffect intentionally triggered on page change\n  useEffect(function resetStructTree() {\n    structTreeDispatch({\n      type: 'RESET'\n    });\n  }, [structTreeDispatch, page]);\n  useEffect(function loadStructTree() {\n    if (customTextRenderer) {\n      // TODO: Document why this is necessary\n      return;\n    }\n    if (!page) {\n      return;\n    }\n    const cancellable = makeCancellable(page.getStructTree());\n    const runningTask = cancellable;\n    cancellable.promise.then(nextStructTree => {\n      structTreeDispatch({\n        type: 'RESOLVE',\n        value: nextStructTree\n      });\n    }).catch(error => {\n      structTreeDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(runningTask);\n  }, [customTextRenderer, page, structTreeDispatch]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Ommitted callbacks so they are not called every time they change\n  useEffect(() => {\n    if (structTree === undefined) {\n      return;\n    }\n    if (structTree === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  }, [structTree]);\n  if (!structTree) {\n    return null;\n  }\n  return _jsx(StructTreeItem, {\n    className: \"react-pdf__Page__structTree structTree\",\n    node: structTree\n  });\n}","map":{"version":3,"names":["jsx","_jsx","useEffect","makeCancellable","invariant","warning","StructTreeItem","usePageContext","useResolver","cancelRunningTask","StructTree","pageContext","onGetStructTreeError","onGetStructTreeErrorProps","onGetStructTreeSuccess","onGetStructTreeSuccessProps","structTreeState","structTreeDispatch","value","structTree","error","structTreeError","customTextRenderer","page","onLoadSuccess","onLoadError","toString","resetStructTree","type","loadStructTree","cancellable","getStructTree","runningTask","promise","then","nextStructTree","catch","undefined","className","node"],"sources":["C:/Users/VAGDEVI/OneDrive/Desktop/Pdf Viewer/pdf-viewer/node_modules/react-pdf/dist/esm/StructTree.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { useEffect } from 'react';\r\nimport makeCancellable from 'make-cancellable-promise';\r\nimport invariant from 'tiny-invariant';\r\nimport warning from 'warning';\r\nimport StructTreeItem from './StructTreeItem.js';\r\nimport usePageContext from './shared/hooks/usePageContext.js';\r\nimport useResolver from './shared/hooks/useResolver.js';\r\nimport { cancelRunningTask } from './shared/utils.js';\r\nexport default function StructTree() {\r\n    const pageContext = usePageContext();\r\n    invariant(pageContext, 'Unable to find Page context.');\r\n    const { onGetStructTreeError: onGetStructTreeErrorProps, onGetStructTreeSuccess: onGetStructTreeSuccessProps, } = pageContext;\r\n    const [structTreeState, structTreeDispatch] = useResolver();\r\n    const { value: structTree, error: structTreeError } = structTreeState;\r\n    const { customTextRenderer, page } = pageContext;\r\n    function onLoadSuccess() {\r\n        if (!structTree) {\r\n            // Impossible, but TypeScript doesn't know that\r\n            return;\r\n        }\r\n        if (onGetStructTreeSuccessProps) {\r\n            onGetStructTreeSuccessProps(structTree);\r\n        }\r\n    }\r\n    function onLoadError() {\r\n        if (!structTreeError) {\r\n            // Impossible, but TypeScript doesn't know that\r\n            return;\r\n        }\r\n        warning(false, structTreeError.toString());\r\n        if (onGetStructTreeErrorProps) {\r\n            onGetStructTreeErrorProps(structTreeError);\r\n        }\r\n    }\r\n    // biome-ignore lint/correctness/useExhaustiveDependencies: useEffect intentionally triggered on page change\r\n    useEffect(function resetStructTree() {\r\n        structTreeDispatch({ type: 'RESET' });\r\n    }, [structTreeDispatch, page]);\r\n    useEffect(function loadStructTree() {\r\n        if (customTextRenderer) {\r\n            // TODO: Document why this is necessary\r\n            return;\r\n        }\r\n        if (!page) {\r\n            return;\r\n        }\r\n        const cancellable = makeCancellable(page.getStructTree());\r\n        const runningTask = cancellable;\r\n        cancellable.promise\r\n            .then((nextStructTree) => {\r\n            structTreeDispatch({ type: 'RESOLVE', value: nextStructTree });\r\n        })\r\n            .catch((error) => {\r\n            structTreeDispatch({ type: 'REJECT', error });\r\n        });\r\n        return () => cancelRunningTask(runningTask);\r\n    }, [customTextRenderer, page, structTreeDispatch]);\r\n    // biome-ignore lint/correctness/useExhaustiveDependencies: Ommitted callbacks so they are not called every time they change\r\n    useEffect(() => {\r\n        if (structTree === undefined) {\r\n            return;\r\n        }\r\n        if (structTree === false) {\r\n            onLoadError();\r\n            return;\r\n        }\r\n        onLoadSuccess();\r\n    }, [structTree]);\r\n    if (!structTree) {\r\n        return null;\r\n    }\r\n    return _jsx(StructTreeItem, { className: \"react-pdf__Page__structTree structTree\", node: structTree });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}